package com.sgametrio.wsd;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import evaluation.InputExtractor;
import evaluation.Scorer;

public class WsdLauncher {
	
	//settings, used to make code clearer, use params in WsdExecutor for development
	private static boolean saveExamples = false;
	private static boolean runSolver = true; //used to create only .gml file
	private static boolean saveGml = false;
	private static boolean verbose = false;
	
	public static void main(String a[]){
		//sentence to be disambiguated
		String[] sentences = {
//				"Eat what you can, and, I'll have the rest.",
//				"Dan speaks three languages, is good a DIY, and he can cook.",
//				"He made such a terrible face that the children ran away.",
////				ambiguous sentences
				"I saw him sawing wood with a saw", //saw
//				"I took out my contact lenses and put on my glasses.", //glass
//				"The water, spilled over the tops of these, \"river\" banks during the last flood." //river
		};
		boolean centrality = !runSolver;
		//launchDisambiguation(saveExamples, saveGml, verbose, runSolver, sentences, centrality);
		launchDisambiguationEvaluation(saveExamples, saveGml, verbose, runSolver, centrality);
		//launchEvaluator(Globals.currentGoldFile, "RESULTS/centrality_wsdResults.KEY");
		//launchEvaluator(Globals.pathToSenseval3 + Globals.goldFileSuffix, "RESULTS/senseval3_centrality.KEY");
		//launchEvaluator(Globals.currentGoldFile, Globals.myKeyFile);
	}
	
	/**
	 * launches disambiguation when the input is a list of sentences
	 * @param saveExamples
	 * @param saveGml
	 * @param verbose
	 * @param sentences
	 */
	private static void launchDisambiguation(boolean saveExamples, boolean saveGml, boolean verbose, boolean runSolver, String[] sentences, boolean centrality){
		
		WsdExecutor wsdExecutor = createWsdExecutor(saveExamples, saveGml, verbose, false, runSolver);
		clearOldFiles(wsdExecutor, false);
		for(String sentence : sentences){
			wsdExecutor.performDisambiguation(sentence, centrality);	
		}
		System.out.print("Finished");
	}

	
	/**
	 * launches disambiguation to calculate performances
	 * @param saveExamples
	 * @param saveGml
	 * @param verbose
	 * @param treeKernelType
	 */
	private static void launchDisambiguationEvaluation(boolean saveExamples, boolean saveGml, boolean verbose, boolean runSolver, boolean centrality){
		
		WsdExecutor wsdExecutor = createWsdExecutor(saveExamples, saveGml, verbose, true, runSolver);
		//deletes all files generated by previous executions
		clearOldFiles(wsdExecutor, false);
		
		try {
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(new File(Globals.currentDataFile));
			//optional, but recommended
			doc.getDocumentElement().normalize();
			//get all sentences in xml file
			NodeList allSentences = doc.getElementsByTagName("sentence");
			// Delete old result file
			if (centrality) {
				FileWriter deleteOldResultsFile = new FileWriter(Globals.resultsPath + Globals.fileNameCentrality + Globals.resultsFileName);
				deleteOldResultsFile.close();
			} else {
				FileWriter deleteOldResultsFile = new FileWriter(Globals.resultsPath + Globals.fileName + Globals.resultsFileName);
				deleteOldResultsFile.close();
			}
			//iterate over all sentences and send them to inputExtractor to be processed
			for (int sentIndex = 0; sentIndex < allSentences.getLength(); sentIndex++) {
				Node sentence = allSentences.item(sentIndex);
				//get the sentence in a format valid to be given to performDisambiguation method
				HashMap<String, ArrayList<String[]>> sentenceMap = InputExtractor.extractInput(sentence);
				wsdExecutor.performDisambiguation(sentenceMap, centrality, false);
			}
			
			//launch Navigli's evaluation framework script
			if (centrality) {
				launchEvaluator(Globals.currentGoldFile, Globals.resultsPath+Globals.fileNameCentrality+Globals.resultsFileName);
			} else {
				launchEvaluator(Globals.currentGoldFile, Globals.resultsPath+Globals.fileName+Globals.resultsFileName);
			}			
		} catch (Exception e) {
			System.err.print(Thread.currentThread().getStackTrace()[1].getMethodName()+" threw: ");
			System.err.println(e);
		}
	}
	
	/**
	 * Execute Navigli's evaluation script
	 * @param goldStandardPathToFile
	 * @param resultsPathToFile
	 */
	public static void launchEvaluator(String goldStandardPathToFile, String resultsPathToFile){
		String[] goldAndRes = {goldStandardPathToFile, resultsPathToFile};
		try {
			Scorer.main(goldAndRes);
		} catch (IOException e) {
			System.err.print(Thread.currentThread().getStackTrace()[1].getMethodName()+" threw: ");
			System.err.println(e);
		}
	}
	
	/**
	 * clear all old files generated by tsp solver and wsd algorithm (.tour, .gtsp, log, .gml). If ask is set to true, a request
	 * of deletion is made for each file.
	 * @param wsd
	 * @param ask
	 */
	private static void clearOldFiles(WsdExecutor wsd, boolean ask){
		File gml = new File(Globals.gmlPath);
		File gtsp = new File(Globals.gtspPath);
		File tour = new File(Globals.tourPath);
		File log = new File("log.txt");
		if(ask){
			if(getChoice(gml, "GML")){
				for(File gmlFile: gml.listFiles()){
					gmlFile.delete();
				}
				System.out.println("All GML files have been removed.");
			}
			if(getChoice(gtsp, "GTSP")){
				for(File gtspFile: gtsp.listFiles()){
					gtspFile.delete();
				}
				System.out.println("All GTSP files have been removed.");
			}
			if(getChoice(tour, "TOUR")){
				for(File tourFile: tour.listFiles()){
					tourFile.delete();
				}
				System.out.println("All TOUR files have been removed.");
			}
			if(getChoice(log, "LOG")){
				log.delete();
				System.out.println("All LOG files have been removed.");
			}
		}else{
			for(File gmlFile: gml.listFiles()){
				gmlFile.delete();
			}
			for(File gtspFile: gtsp.listFiles()){
				gtspFile.delete();
			}
			for(File tourFile: tour.listFiles()){
				tourFile.delete();
			}
			log.delete();
		}
	}
	
	/**
	 * manages messages to the user
	 * @param fileToDelete
	 * @param type
	 * @return
	 */
	private static boolean getChoice(File fileToDelete, String type){
		if(fileToDelete.exists()){
			System.out.println("Do you want to delete all "+type+" files? (Y/N)");
			Scanner tastiera = new Scanner(System.in);
			String choice = tastiera.nextLine();
			tastiera.close();
			if(choice.contains("Y")||choice.contains("y")){
				return true;
			}else if(choice.contains("N")||choice.contains("n")){
				if(type.equalsIgnoreCase("TOUR")){
					System.out.println("Leave .TOUR files may cause errors during computation."
							+ "Are you sure you don't want to delete them? (Y/N)" );
					String sure = tastiera.nextLine();
					if(sure.contains("Y")||sure.contains("y")){
						return true;
					}else if(sure.contains("N")||sure.contains("n")){
						return false;
					}else{
						System.err.println("Invalid choice.");
					}
				}
				
				return false;
			}else{
				System.err.println("Invalid choice. Type Y or N");
				getChoice(fileToDelete, type);
			}
		}else{
			System.err.println("File "+fileToDelete.toPath()+" not found");
		}
		return false;
	}
	
	/**
	 * initialize WsdExecutor with proper parameters
	 * @param saveExamples
	 * @param saveGml
	 * @param verbose
	 * @return
	 */
	private static WsdExecutor createWsdExecutor(boolean saveExamples, boolean saveGml, boolean verbose, boolean evaluation, boolean runSolver){
		WsdExecutor wsdExecutor = new WsdExecutor();
		if(runSolver) {
			wsdExecutor.enableSolver();
		}
		if(saveExamples){
			wsdExecutor.enableSaveExamples();
		}
		if(saveGml){
			wsdExecutor.enableSaveGml();
		}
		if(verbose){
			wsdExecutor.enableVerboseMode();
		}
		if(evaluation){
			wsdExecutor.enableEvaluationMode();
		}
		return wsdExecutor;
				
	}
}
